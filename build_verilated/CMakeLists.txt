cmake_minimum_required(VERSION 3.10)
message(STATUS "CMake Version ${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}.${CMAKE_PATCH_VERSION}")

###This file is used to build the verilated models of CV32E40X and Vicuna###

########################
# Arguments
#
# RV_ARCH : select the processor architecture configuration to verilate
# TRACE   : If defined, enable vcd trace outputs.  WARNING: Traces can be very large (GBs)
# TRACE_FULL   : If defined, trace outputs of ENTIRE model WARNING: Traces can be very VERY large (GBs) (requires TRACE=ON)
# CACHE :   Enable a cache configuration


#####################
# Setup the CMake Project
####################

project(Verilated-Builds LANGUAGES C CXX DESCRIPTION "Environment for Verilating Models")
find_package(verilator HINTS ${CMAKE_CURRENT_SOURCE_DIR}/../Toolchain/verilator)

# See whats going in CMake while getting the build process up and running
set(CMAKE_VERBOSE_MAKEFILE ON)

# Using C and C++ 11
set(CMAKE_C_STANDARD 14)
set(CMAKE_CXX_STANDARD 14)


#Currently Supported: rv32im, rv32imzve32x, rv32imf, rv32imfzhf, rv32imfzve32x, rv32imfzve32f
set(RISCV_ARCH rv32im CACHE STRING "Specify the configuration")

option(TRACE "Enable minimal VCD trace outputs" OFF)
option(TRACE_FULL "Enable FULL VCD trace outputs" OFF) #TODO: prevent this option from being cached, force user to always manually enable it
option(VERIL_MODEL "Build Verilated Model, not Verilog Model for OpenLand2" ON) #TODO: prevent this option from being cached, force user to always manually enable it



set(CACHE NONE CACHE STRING "NONE, D-Min, D-I-Min, D, D-I")

set(VREG_W 128 CACHE STRING "VREG_W")
set(VMEM_W 32 CACHE STRING "VMEM_W")
set(MEM_W 32 CACHE STRING "MEM_W")
set(VLANE_W 32 CACHE STRING "VLANE_W")
set(DCACHE_LINE_W 128 CACHE STRING "DCACHE_LINE_W") 

# Experimental Features NOT STABLE
option(OLD_VICUNA "Return to Original Vicuna configuration with minimal timing anomalies" ON)
option(FORCE_ALIGNED_READS "Return to Original Vicuna configuration where all vector reads must be aligned with the VMEM Port" ON)

##############
# Configuration Selection
##############



#set the variables to include the correct modules/connections in the project
if(${RISCV_ARCH} STREQUAL "rv32im") #Build only CV32E40X
    set(ARCH_XIF_FLAG "" ) 
    set(ARCH_FPU_FLAG "" )
    set(ARCH_ZFH_FLAG "" )
    set(ARCH_VIC_FLAG "" )  
    set(ARCH_VIC_F_FLAG "" )
    set(ARCH_VIC_FH_FLAG "" ) 
    set(VPROC_CONFIG dual-div) #needs to be included so autogenerated source file is present.  VPROC not used for this configuration
    
elseif(${RISCV_ARCH} STREQUAL "rv32imf") #Build CV32E40X with FPU on the Xif interface
    set(ARCH_XIF_FLAG -DXIF_ON ) 
    set(ARCH_FPU_FLAG -DSCALAR_FPU_ON )
    set(ARCH_ZFH_FLAG "" )
    set(ARCH_VIC_FLAG "" ) 
    set(ARCH_VIC_F_FLAG "" ) 
    set(ARCH_VIC_FH_FLAG "" ) 
    set(VPROC_CONFIG dual-div) #needs to be included so autogenerated source file is present.  VPROC not used for this configuration
    
elseif(${RISCV_ARCH} STREQUAL "rv32imfzfh") #Build CV32E40X with FPU on the Xif interface with half-float support
    set(ARCH_XIF_FLAG -DXIF_ON ) 
    set(ARCH_FPU_FLAG -DSCALAR_FPU_ON )
    set(ARCH_ZFH_FLAG -DZFH_ON )
    set(ARCH_VIC_FLAG "" )
    set(ARCH_VIC_F_FLAG "" ) 
    set(ARCH_VIC_FH_FLAG "" ) 
    set(VPROC_CONFIG dual-div)   #needs to be included so autogenerated source file is present.  VPROC not used for this configuration
    
elseif(${RISCV_ARCH} STREQUAL "rv32imzve32x") #Build CV32E40X with Vicuna on the Xif interface
    set(ARCH_XIF_FLAG -DXIF_ON ) 
    set(ARCH_FPU_FLAG "" )
    set(ARCH_ZFH_FLAG "" )
    set(ARCH_VIC_FLAG -DVICUNA_ON )
    set(ARCH_VIC_F_FLAG "" )
    set(ARCH_VIC_FH_FLAG "" )  
    set(VPROC_CONFIG dual-div) 
     
elseif(${RISCV_ARCH} STREQUAL "rv32imfzve32x") #Build CV32E40X with Vicuna and FPU on the Xif interface
    set(ARCH_XIF_FLAG -DXIF_ON ) 
    set(ARCH_FPU_FLAG -DSCALAR_FPU_ON )
    set(ARCH_ZFH_FLAG "" )
    set(ARCH_VIC_FLAG -DVICUNA_ON )
    set(ARCH_VIC_F_FLAG "" )
    set(ARCH_VIC_FH_FLAG "" )  
    set(VPROC_CONFIG dual-div)
    
elseif(${RISCV_ARCH} STREQUAL "rv32imfzfhzve32x") #Build CV32E40X with Vicuna and FPU on the Xif interface
    set(ARCH_XIF_FLAG -DXIF_ON ) 
    set(ARCH_FPU_FLAG -DSCALAR_FPU_ON )
    set(ARCH_ZFH_FLAG -DZFH_ON )
    set(ARCH_VIC_FLAG -DVICUNA_ON )
    set(ARCH_VIC_F_FLAG "" ) 
    set(ARCH_VIC_FH_FLAG "" ) 
    set(VPROC_CONFIG dual-div)
    
elseif(${RISCV_ARCH} STREQUAL "rv32imfzve32f") #Build CV32E40X with Vicuna (+floating point) and FPU on the Xif interface
    set(ARCH_XIF_FLAG -DXIF_ON ) 
    set(ARCH_FPU_FLAG -DSCALAR_FPU_ON )
    set(ARCH_ZFH_FLAG "" )
    set(ARCH_VIC_FLAG -DVICUNA_ON )
    set(ARCH_VIC_F_FLAG  -DVICUNA_F_ON) 
    set(ARCH_VIC_FH_FLAG  ) 
    set(VPROC_CONFIG dual-fpu)
    
elseif(${RISCV_ARCH} STREQUAL "rv32imf_zfh_zve32f_zvfh") #Build CV32E40X with Vicuna (+floating point + half precision float) and FPU on the Xif interface
    set(ARCH_XIF_FLAG -DXIF_ON ) 
    set(ARCH_FPU_FLAG -DSCALAR_FPU_ON )
    set(ARCH_ZFH_FLAG -DZFH_ON )
    set(ARCH_VIC_FLAG -DVICUNA_ON )
    set(ARCH_VIC_F_FLAG  -DVICUNA_F_ON) 
    set(ARCH_VIC_FH_FLAG  -DVICUNA_ZVFH_ON) 
    set(VPROC_CONFIG dual-fpu)

else()
    message(FATAL_ERROR "Unsupported RISCV_ARCH selected")
    
endif()

####
# Vicuna configuration Variables
# Caches are always 2-way set associative, and require at least 2 blocks per set
####

if(${CACHE} STREQUAL "NONE")
    set(ICACHE_SZ 0)
    set(DCACHE_SZ 0)
    set(ICACHE_LINE_W 64)
    set(DCACHE_LINE_W 64) 
elseif(${CACHE} STREQUAL "D-MIN")
    set(ICACHE_SZ 0)
    set(DCACHE_SZ 32)
    set(ICACHE_LINE_W 64)
    set(DCACHE_LINE_W 64) 
elseif(${CACHE} STREQUAL "D-I-MIN")
    set(ICACHE_SZ 32) #Minimum sizes for I and D caches Results in 2 sets with 2 64-bit lines each.
    set(DCACHE_SZ 32)
    set(ICACHE_LINE_W 64)
    set(DCACHE_LINE_W 64) 
elseif(${CACHE} STREQUAL "D")
    set(ICACHE_SZ 0)
    set(DCACHE_SZ 4096)
    set(ICACHE_LINE_W 64)
    set(DCACHE_LINE_W 256) 
elseif(${CACHE} STREQUAL "D-I")
    set(ICACHE_SZ 8192)
    set(DCACHE_SZ 8192)
    set(ICACHE_LINE_W 512)
    set(DCACHE_LINE_W 512)
else()
    message(FATAL_ERROR "Unsupported Cache Configuration")
endif()

#set(VREG_W 128)
#set(VMEM_W 64)  
#set(MEM_W 32)
set(MEM_SZ 4194304)      
set(MEM_LATENCY 1)  #TODO: THIS IS UNUSED BY THE DESIGN: REMOVE


####
# Sources/Include Directories
####
 
#Path to CV32E40X sources               
set(DESIGN_RTL_DIR_CV32E40X ${CMAKE_CURRENT_SOURCE_DIR}/../Vicuna/vicuna_zve32f_zvhf/cv32e40x/rtl)

#Path to VICUNA sources  
set(DESIGN_RTL_DIR_VICUNA ${CMAKE_CURRENT_SOURCE_DIR}/../Vicuna/vicuna_zve32f_zvhf/rtl)
#Path to VICUNA Sim dir
set(VICUNA_SIM_DIR ${CMAKE_CURRENT_SOURCE_DIR}/../Vicuna/vicuna_zve32f_zvhf/sim/)

#Path to FPU_SS sources
set(DESIGN_RTL_DIR_FPU_SS ${CMAKE_CURRENT_SOURCE_DIR}/../Vicuna/vicuna_zve32f_zvhf/fpu_ss/src)
#Path to FPNEW sources
set(DESIGN_RTL_DIR_FPNEW ${CMAKE_CURRENT_SOURCE_DIR}/../Vicuna/vicuna_zve32f_zvhf/fpu_ss/fpnew/src)


set(CV32E40X_SOURCE ${DESIGN_RTL_DIR_CV32E40X}/include/cv32e40x_pkg.sv                  #Sources Needed for CV32E40X
                    ${DESIGN_RTL_DIR_CV32E40X}/if_c_obi.sv
                    ${DESIGN_RTL_DIR_CV32E40X}/if_xif.sv
                    ${DESIGN_RTL_DIR_CV32E40X}/../bhv/cv32e40x_sim_clock_gate.sv
                    ${DESIGN_RTL_DIR_CV32E40X}/cv32e40x_core.sv 
                    ${DESIGN_RTL_DIR_CV32E40X}/cv32e40x_a_decoder.sv 
                    ${DESIGN_RTL_DIR_CV32E40X}/cv32e40x_alignment_buffer.sv
                    ${DESIGN_RTL_DIR_CV32E40X}/cv32e40x_alu.sv
                    ${DESIGN_RTL_DIR_CV32E40X}/cv32e40x_alu_b_cpop.sv
                    ${DESIGN_RTL_DIR_CV32E40X}/cv32e40x_b_decoder.sv
                    ${DESIGN_RTL_DIR_CV32E40X}/cv32e40x_clic_int_controller.sv
                    ${DESIGN_RTL_DIR_CV32E40X}/cv32e40x_compressed_decoder.sv
                    ${DESIGN_RTL_DIR_CV32E40X}/cv32e40x_controller.sv
                    ${DESIGN_RTL_DIR_CV32E40X}/cv32e40x_controller_bypass.sv
                    ${DESIGN_RTL_DIR_CV32E40X}/cv32e40x_controller_fsm.sv
                    ${DESIGN_RTL_DIR_CV32E40X}/cv32e40x_csr.sv
                    ${DESIGN_RTL_DIR_CV32E40X}/cv32e40x_cs_registers.sv
                    ${DESIGN_RTL_DIR_CV32E40X}/cv32e40x_data_obi_interface.sv
                    ${DESIGN_RTL_DIR_CV32E40X}/cv32e40x_decoder.sv
                    ${DESIGN_RTL_DIR_CV32E40X}/cv32e40x_div.sv
                    ${DESIGN_RTL_DIR_CV32E40X}/cv32e40x_ex_stage.sv
                    ${DESIGN_RTL_DIR_CV32E40X}/cv32e40x_ff_one.sv
                    ${DESIGN_RTL_DIR_CV32E40X}/cv32e40x_i_decoder.sv
                    ${DESIGN_RTL_DIR_CV32E40X}/cv32e40x_id_stage.sv
                    ${DESIGN_RTL_DIR_CV32E40X}/cv32e40x_if_stage.sv
                    ${DESIGN_RTL_DIR_CV32E40X}/cv32e40x_instr_obi_interface.sv
                    ${DESIGN_RTL_DIR_CV32E40X}/cv32e40x_int_controller.sv
                    ${DESIGN_RTL_DIR_CV32E40X}/cv32e40x_load_store_unit.sv
                    ${DESIGN_RTL_DIR_CV32E40X}/cv32e40x_lsu_response_filter.sv
                    ${DESIGN_RTL_DIR_CV32E40X}/cv32e40x_m_decoder.sv
                    ${DESIGN_RTL_DIR_CV32E40X}/cv32e40x_mpu.sv
                    ${DESIGN_RTL_DIR_CV32E40X}/cv32e40x_mult.sv
                    ${DESIGN_RTL_DIR_CV32E40X}/cv32e40x_pc_target.sv
                    ${DESIGN_RTL_DIR_CV32E40X}/cv32e40x_pma.sv
                    ${DESIGN_RTL_DIR_CV32E40X}/cv32e40x_popcnt.sv
                    ${DESIGN_RTL_DIR_CV32E40X}/cv32e40x_prefetcher.sv
                    ${DESIGN_RTL_DIR_CV32E40X}/cv32e40x_prefetch_unit.sv
                    ${DESIGN_RTL_DIR_CV32E40X}/cv32e40x_register_file.sv
                    ${DESIGN_RTL_DIR_CV32E40X}/cv32e40x_register_file_wrapper.sv
                    ${DESIGN_RTL_DIR_CV32E40X}/cv32e40x_sequencer.sv
                    ${DESIGN_RTL_DIR_CV32E40X}/cv32e40x_sleep_unit.sv
                    ${DESIGN_RTL_DIR_CV32E40X}/cv32e40x_wb_stage.sv
                    ${DESIGN_RTL_DIR_CV32E40X}/cv32e40x_write_buffer.sv
                    )
               

set(CV32E40X_INCLUDE ${DESIGN_RTL_DIR_CV32E40X}                                         #CV32E40X Include Dirs
                    ${DESIGN_RTL_DIR_CV32E40X}/include
                    ${DESIGN_RTL_DIR_CV32E40X}/../bhv)
                     
                     
set(VICUNA_SOURCE   ${DESIGN_RTL_DIR_VICUNA}/vproc_pkg.sv                               #Vicuna sources
                    ${DESIGN_RTL_DIR_VICUNA}/../vproc_config.sv 
                    ${DESIGN_RTL_DIR_VICUNA}/vproc_top.sv
                    ${DESIGN_RTL_DIR_VICUNA}/vproc_xif.sv
                    ${DESIGN_RTL_DIR_VICUNA}/vproc_core.sv
                    ${DESIGN_RTL_DIR_VICUNA}/vproc_vregpack.sv
                    ${DESIGN_RTL_DIR_VICUNA}/vproc_vregunpack.sv
                    ${DESIGN_RTL_DIR_VICUNA}/vproc_alu.sv
                    ${DESIGN_RTL_DIR_VICUNA}/vproc_cache.sv
                    ${DESIGN_RTL_DIR_VICUNA}/vproc_decoder.sv
                    ${DESIGN_RTL_DIR_VICUNA}/vproc_dispatcher.sv
                    ${DESIGN_RTL_DIR_VICUNA}/vproc_div.sv
                    ${DESIGN_RTL_DIR_VICUNA}/vproc_div_shift_clz.sv
                    ${DESIGN_RTL_DIR_VICUNA}/vproc_elem.sv
                    ${DESIGN_RTL_DIR_VICUNA}/vproc_fpu.sv
                    ${DESIGN_RTL_DIR_VICUNA}/vproc_lsu.sv
                    ${DESIGN_RTL_DIR_VICUNA}/vproc_mul.sv
                    ${DESIGN_RTL_DIR_VICUNA}/vproc_mul_block.sv
                    ${DESIGN_RTL_DIR_VICUNA}/vproc_pending_wr.sv
                    ${DESIGN_RTL_DIR_VICUNA}/vproc_pipeline.sv
                    ${DESIGN_RTL_DIR_VICUNA}/vproc_pipeline_wrapper.sv
                    ${DESIGN_RTL_DIR_VICUNA}/vproc_queue.sv
                    ${DESIGN_RTL_DIR_VICUNA}/vproc_result.sv
                    ${DESIGN_RTL_DIR_VICUNA}/vproc_sld.sv
                    ${DESIGN_RTL_DIR_VICUNA}/vproc_unit_mux.sv
                    ${DESIGN_RTL_DIR_VICUNA}/vproc_unit_wrapper.sv
                    ${DESIGN_RTL_DIR_VICUNA}/vproc_vregfile.sv
                    ${DESIGN_RTL_DIR_VICUNA}/vproc_vreg_wr_mux.sv
                    )

set(VICUNA_INCLUDE  ${DESIGN_RTL_DIR_VICUNA}                                            #Vicuna Include Dirs
                    ${DESIGN_RTL_DIR_VICUNA}/../sva)
                   
set(FPNEW_SOURCE    ${DESIGN_RTL_DIR_FPNEW}/fpnew_pkg.sv 
                    ${DESIGN_RTL_DIR_FPNEW}/common_cells/src/cf_math_pkg.sv             #FPNEW Sources
                    ${DESIGN_RTL_DIR_FPNEW}/fpu_div_sqrt_mvp/hdl/defs_div_sqrt_mvp.sv
                    ${DESIGN_RTL_DIR_FPNEW}/fpnew_top.sv
                    ${DESIGN_RTL_DIR_FPNEW}/fpnew_cast_multi.sv
                    ${DESIGN_RTL_DIR_FPNEW}/fpnew_classifier.sv
                    ${DESIGN_RTL_DIR_FPNEW}/fpnew_divsqrt_multi.sv
                    ${DESIGN_RTL_DIR_FPNEW}/fpnew_divsqrt_th_32.sv
                    ${DESIGN_RTL_DIR_FPNEW}/fpnew_divsqrt_th_64_multi.sv
                    ${DESIGN_RTL_DIR_FPNEW}/fpnew_fma.sv
                    ${DESIGN_RTL_DIR_FPNEW}/fpnew_fma_multi.sv
                    ${DESIGN_RTL_DIR_FPNEW}/fpnew_noncomp.sv
                    ${DESIGN_RTL_DIR_FPNEW}/fpnew_opgroup_block.sv
                    ${DESIGN_RTL_DIR_FPNEW}/fpnew_opgroup_fmt_slice.sv
                    ${DESIGN_RTL_DIR_FPNEW}/fpnew_opgroup_multifmt_slice.sv
                    ${DESIGN_RTL_DIR_FPNEW}/fpnew_rounding.sv
                    ${DESIGN_RTL_DIR_FPNEW}/common_cells/src/stream_fifo.sv
                    ${DESIGN_RTL_DIR_FPNEW}/common_cells/src/lzc.sv
                    ${DESIGN_RTL_DIR_FPNEW}/common_cells/src/rr_arb_tree.sv
                    ${DESIGN_RTL_DIR_FPNEW}/common_cells/src/fifo_v3.sv
                    ${DESIGN_RTL_DIR_FPNEW}/../vendor/openc910/C910_RTL_FACTORY/gen_rtl/vfdsu/rtl/ct_vfdsu_ctrl.v
                    ${DESIGN_RTL_DIR_FPNEW}/../vendor/openc910/C910_RTL_FACTORY/gen_rtl/vfdsu/rtl/ct_vfdsu_double.v
                    ${DESIGN_RTL_DIR_FPNEW}/../vendor/openc910/C910_RTL_FACTORY/gen_rtl/vfdsu/rtl/ct_vfdsu_ff1.v
                    ${DESIGN_RTL_DIR_FPNEW}/../vendor/openc910/C910_RTL_FACTORY/gen_rtl/vfdsu/rtl/ct_vfdsu_pack.v
                    ${DESIGN_RTL_DIR_FPNEW}/../vendor/openc910/C910_RTL_FACTORY/gen_rtl/vfdsu/rtl/ct_vfdsu_prepare.v
                    ${DESIGN_RTL_DIR_FPNEW}/../vendor/openc910/C910_RTL_FACTORY/gen_rtl/vfdsu/rtl/ct_vfdsu_round.v
                    ${DESIGN_RTL_DIR_FPNEW}/../vendor/openc910/C910_RTL_FACTORY/gen_rtl/vfdsu/rtl/ct_vfdsu_scalar_dp.v
                    ${DESIGN_RTL_DIR_FPNEW}/../vendor/openc910/C910_RTL_FACTORY/gen_rtl/vfdsu/rtl/ct_vfdsu_srt.v
                    ${DESIGN_RTL_DIR_FPNEW}/../vendor/openc910/C910_RTL_FACTORY/gen_rtl/vfdsu/rtl/ct_vfdsu_srt_radix16_bound_table.v
                    ${DESIGN_RTL_DIR_FPNEW}/../vendor/openc910/C910_RTL_FACTORY/gen_rtl/vfdsu/rtl/ct_vfdsu_srt_radix16_with_sqrt.v
                    ${DESIGN_RTL_DIR_FPNEW}/../vendor/openc910/C910_RTL_FACTORY/gen_rtl/vfdsu/rtl/ct_vfdsu_top.v
                    ${DESIGN_RTL_DIR_FPNEW}/../vendor/openc910/C910_RTL_FACTORY/gen_rtl/clk/rtl/gated_clk_cell.v
                    ${DESIGN_RTL_DIR_FPNEW}/../vendor/opene906/E906_RTL_FACTORY/gen_rtl/fdsu/rtl/pa_fdsu_ctrl.v
                    ${DESIGN_RTL_DIR_FPNEW}/../vendor/opene906/E906_RTL_FACTORY/gen_rtl/fdsu/rtl/pa_fdsu_ff1.v
                    ${DESIGN_RTL_DIR_FPNEW}/../vendor/opene906/E906_RTL_FACTORY/gen_rtl/fdsu/rtl/pa_fdsu_pack_single.v
                    ${DESIGN_RTL_DIR_FPNEW}/../vendor/opene906/E906_RTL_FACTORY/gen_rtl/fdsu/rtl/pa_fdsu_prepare.v
                    ${DESIGN_RTL_DIR_FPNEW}/../vendor/opene906/E906_RTL_FACTORY/gen_rtl/fdsu/rtl/pa_fdsu_round_single.v
                    ${DESIGN_RTL_DIR_FPNEW}/../vendor/opene906/E906_RTL_FACTORY/gen_rtl/fdsu/rtl/pa_fdsu_special.v
                    ${DESIGN_RTL_DIR_FPNEW}/../vendor/opene906/E906_RTL_FACTORY/gen_rtl/fdsu/rtl/pa_fdsu_srt_single.v
                    ${DESIGN_RTL_DIR_FPNEW}/../vendor/opene906/E906_RTL_FACTORY/gen_rtl/fdsu/rtl/pa_fdsu_top.v
                    #${DESIGN_RTL_DIR_FPNEW}/../vendor/opene906/E906_RTL_FACTORY/gen_rtl/clk/rtl/gated_clk_cell.v
                    ${DESIGN_RTL_DIR_FPNEW}/../vendor/opene906/E906_RTL_FACTORY/gen_rtl/fpu/rtl/pa_fpu_dp.v
                    ${DESIGN_RTL_DIR_FPNEW}/../vendor/opene906/E906_RTL_FACTORY/gen_rtl/fpu/rtl/pa_fpu_frbus.v
                    ${DESIGN_RTL_DIR_FPNEW}/../vendor/opene906/E906_RTL_FACTORY/gen_rtl/fpu/rtl/pa_fpu_src_type.v
                    )
                    


set(FPNEW_INCLUDE   ${DESIGN_RTL_DIR_FPNEW}                                             #FPNEW Include Dirs
                    ${DESIGN_RTL_DIR_FPNEW}/common_cells/include
                    ${DESIGN_RTL_DIR_FPNEW}/common_cells/src
                    ${DESIGN_RTL_DIR_FPNEW}/fpu_div_sqrt_mvp/hdl
                    ${DESIGN_RTL_DIR_FPNEW}/../vendor/openc910/C910_RTL_FACTORY/gen_rtl/vfdsu/rtl
                    ${DESIGN_RTL_DIR_FPNEW}/../vendor/openc910/C910_RTL_FACTORY/gen_rtl/clk/rtl
                    ${DESIGN_RTL_DIR_FPNEW}/../vendor/opene906/E906_RTL_FACTORY/gen_rtl/fdsu/rtl
                    ${DESIGN_RTL_DIR_FPNEW}/../vendor/opene906/E906_RTL_FACTORY/gen_rtl/clk/rtl
                    ${DESIGN_RTL_DIR_FPNEW}/../vendor/opene906/E906_RTL_FACTORY/gen_rtl/fpu/rtl
                    )               
                   
                   
set(FPU_SS_SOURCE   ${DESIGN_RTL_DIR_FPU_SS}/fpu_ss_pkg.sv                              #FPU_SS Sources
                    ${DESIGN_RTL_DIR_FPU_SS}/fpu_ss_prd_f_pkg.sv
                    ${DESIGN_RTL_DIR_FPU_SS}/fpu_ss_prd_f_zfh_pkg.sv
                    ${DESIGN_RTL_DIR_FPU_SS}/fpu_ss_prd_zfinx_pkg.sv
                    ${DESIGN_RTL_DIR_FPU_SS}/fpu_ss_instr_pkg.sv
                    ${DESIGN_RTL_DIR_FPU_SS}/fpu_ss.sv
                    ${DESIGN_RTL_DIR_FPU_SS}/fpu_ss_compressed_predecoder.sv
                    ${DESIGN_RTL_DIR_FPU_SS}/fpu_ss_controller.sv
                    ${DESIGN_RTL_DIR_FPU_SS}/fpu_ss_csr.sv
                    ${DESIGN_RTL_DIR_FPU_SS}/fpu_ss_decoder.sv
                    ${DESIGN_RTL_DIR_FPU_SS}/fpu_ss_predecoder.sv
                    ${DESIGN_RTL_DIR_FPU_SS}/fpu_ss_regfile.sv )


set(FPU_SS_INCLUDE  ${DESIGN_RTL_DIR_FPU_SS} )                                          #FPU_SS Include Dirs
                 
                   
####
#Generate vproc_config.sv for chosen configuration.  Must be generated before verilating
####
#TODO:Is there a better way to set required env variables for 'make' call to generate vproc_config.sv?
set(ENV{VPROC_CONFIG} ${VPROC_CONFIG})
set(ENV{VREG_W} ${VREG_W})
set(ENV{VMEM_W} ${VMEM_W})
set(ENV{VLANE_W} ${VLANE_W})
execute_process(COMMAND rm -f vproc_config.sv
                COMMAND make -f config.mk VPROC_CONFIG_PKG=vproc_config.sv
                WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/../Vicuna/vicuna_zve32f_zvhf)



if(TRACE)
    add_definitions(-DTRACE_VCD) #This does nothing.  TODO: Confirm and remove.
    set(TRACE TRACE)
    
    if(TRACE_FULL)
        set(TRACE_FLAG  ) #no --trace-depth flag defaults to entire model
    else()
        set(TRACE_FLAG --trace-depth 2)
    endif()
endif()


if(OLD_VICUNA)
    set(VICUNA_MODE -DOLD_VICUNA)
endif()

if(FORCE_ALIGNED_READS)
    set(READ_MODE -DFORCE_ALIGNED_READS)
endif()
#Add this flag to detect if Vicuna is enabled to allow for correct selection of verilator header files in verilator_main.cpp
add_definitions(${ARCH_VIC_FLAG})

#Todo: allow user to set this
#add_definitions(-DABORT_CYCLES=100000)  #Need to disable this for benchmarks, it triggers when clearing the tensor arenas.  Better way to detect stalls has been added, leaving this for future use

 

#Create the verilated model 
add_executable(verilated_model ${VICUNA_SIM_DIR}verilator_main.cpp)

if(VERIL_MODEL)
verilate(verilated_model SOURCES ${FPNEW_SOURCE} ${FPU_SS_SOURCE} ${CV32E40X_SOURCE} ${VICUNA_SOURCE} 
               INCLUDE_DIRS  ${FPNEW_INCLUDE} ${FPU_SS_INCLUDE} ${CV32E40X_INCLUDE} ${VICUNA_INCLUDE} 
               TOP_MODULE vproc_top 
               PREFIX Vvproc_top
               ${TRACE}                                    
               VERILATOR_ARGS -cc -exe ${VICUNA_SIM_DIR}verilator_main.cpp --unroll-count 1024 
                              -Wno-WIDTH -Wno-PINMISSING -Wno-UNOPTFLAT   
	                          -Wno-UNSIGNED -Wno-IMPLICIT -Wno-LITENDIAN -Wno-CASEINCOMPLETE        
	                          -Wno-SYMRSVDWORD -Wno-BLKANDNBLK -Wno-BLKSEQ -Wno-SYNCASYNCNET        
	                          -Wno-COMBDLY 
	                          -Wno-WIDTHCONCAT         
                              #+define+COREV_ASSERT_OFF       #Fixes UVM error with CV32E40X (Needed when not using -DVPROC_SVA)
	                          --clk clk_i
	                          #--trace-depth 2
	                          ${TRACE_FLAG} 
	                          --assert -DVPROC_SVA
                              -GMEM_W=${MEM_W} -GVMEM_W=${VMEM_W} -GICACHE_SZ=${ICACHE_SZ} -GICACHE_LINE_W=${ICACHE_LINE_W} -GDCACHE_SZ=${DCACHE_SZ} -GDCACHE_LINE_W=${DCACHE_LINE_W}
                              -DMAIN_CORE_CV32E40X #Flag to select CV32E40X as scalar core
                              ${VICUNA_MODE}
                              ${READ_MODE}
                              ${ARCH_XIF_FLAG} #Each flag must be in a separate variable or they don't get passed correctly
                              ${ARCH_FPU_FLAG} 
                              ${ARCH_ZFH_FLAG} 
                              ${ARCH_VIC_FLAG}   
                              ${ARCH_VIC_F_FLAG} 
                              ${ARCH_VIC_FH_FLAG}                   
                              -CFLAGS "-std=gnu++14 -O2 -DUSE_VICUNA=ON")
                              
                              
 else() #Create verilog files for OpenLane2
                                  
                                  
                                  
     set(CV32E40X_INCLUDE_SV2V  --incdir=${DESIGN_RTL_DIR_CV32E40X}                                         #CV32E40X Include Dirs
                                --incdir=${DESIGN_RTL_DIR_CV32E40X}/include
                                --incdir=${DESIGN_RTL_DIR_CV32E40X}/../bhv)
                                
     set(VICUNA_INCLUDE_SV2V    --incdir=${DESIGN_RTL_DIR_VICUNA}                                            #Vicuna Include Dirs
                                --incdir=${DESIGN_RTL_DIR_VICUNA}/../sva)
                                
     set(FPNEW_INCLUDE_SV2V     --incdir=${DESIGN_RTL_DIR_FPNEW}                                             #FPNEW Include Dirs
                                --incdir=${DESIGN_RTL_DIR_FPNEW}/common_cells/include
                                --incdir=${DESIGN_RTL_DIR_FPNEW}/common_cells/src
                                --incdir=${DESIGN_RTL_DIR_FPNEW}/fpu_div_sqrt_mvp/hdl
                                --incdir=${DESIGN_RTL_DIR_FPNEW}/../vendor/openc910/C910_RTL_FACTORY/gen_rtl/vfdsu/rtl
                                --incdir=${DESIGN_RTL_DIR_FPNEW}/../vendor/openc910/C910_RTL_FACTORY/gen_rtl/clk/rtl
                                --incdir=${DESIGN_RTL_DIR_FPNEW}/../vendor/opene906/E906_RTL_FACTORY/gen_rtl/fdsu/rtl
                                --incdir=${DESIGN_RTL_DIR_FPNEW}/../vendor/opene906/E906_RTL_FACTORY/gen_rtl/clk/rtl
                                --incdir=${DESIGN_RTL_DIR_FPNEW}/../vendor/opene906/E906_RTL_FACTORY/gen_rtl/fpu/rtl)
                                
     set(FPU_SS_INCLUDE_SV2V    --incdir=${DESIGN_RTL_DIR_FPU_SS} )                                          #FPU_SS Include Dirs
     
     #Macros set this way don't seem to work for sv2v
     #set(MACROS_SV2V "--define=MAIN_CORE_CV32E40X --define=MEM_W=${MEM_W} --define=VMEM_W=${VMEM_W} --define=ICACHE_SZ=${ICACHE_SZ} --define=ICACHE_LINE_W=${ICACHE_LINE_W} --define=DCACHE_SZ=${DCACHE_SZ} --define=DCACHE_LINE_W=${DCACHE_LINE_W}")
     
     #Set them by optionally including a SV file with the macro defined there
     #Currently not able to synthesize the cache from here (workaround is to set different default values in vproc_top)
     set(MACRO_SOURCE ${CMAKE_CURRENT_SOURCE_DIR}/OpenLane2_Support/MAIN_CORE_CV32E40X.sv)

    if(OLD_VICUNA)
        #set(MACROS_SV2V "${MACROS_SV2V} --define=OLD_VICUNA")
        set(MACRO_SOURCE  ${MACRO_SOURCE}
                          ${CMAKE_CURRENT_SOURCE_DIR}/OpenLane2_Support/OLD_VICUNA.sv)
    endif()
    if(FORCE_ALIGNED_READS)
        #set(MACROS_SV2V "${MACROS_SV2V} --define=FORCE_ALIGNED_READS")
        set(MACRO_SOURCE  ${MACRO_SOURCE}
                          ${CMAKE_CURRENT_SOURCE_DIR}/OpenLane2_Support/FORCE_ALIGNED_READS.sv)
    endif()
    if(NOT("${ARCH_XIF_FLAG}" STREQUAL ""))
            #set(MACROS_SV2V "${MACROS_SV2V} --define=XIF_ON")
            set(MACRO_SOURCE  ${MACRO_SOURCE}
                          ${CMAKE_CURRENT_SOURCE_DIR}/OpenLane2_Support/XIF_ON.sv)                  
    endif()
    if(NOT("${ARCH_FPU_FLAG}" STREQUAL ""))
            #set(MACROS_SV2V "${MACROS_SV2V} --define=SCALAR_FPU_ON")
            set(MACRO_SOURCE  ${MACRO_SOURCE}
                              ${CMAKE_CURRENT_SOURCE_DIR}/OpenLane2_Support/SCALAR_FPU_ON.sv)
    endif()
    if(NOT("${ARCH_ZFH_FLAG}" STREQUAL  ""))
            #set(MACROS_SV2V "${MACROS_SV2V} --define=ZFH_ON" )
            set(MACRO_SOURCE  ${MACRO_SOURCE}
                              ${CMAKE_CURRENT_SOURCE_DIR}/OpenLane2_Support/ZFH_ON.sv)
    endif()
    if(NOT("${ARCH_VIC_FLAG}" STREQUAL  ""))
            #set(MACROS_SV2V "${MACROS_SV2V} --define=VICUNA_ON" )
            set(MACRO_SOURCE  ${MACRO_SOURCE}
                              ${CMAKE_CURRENT_SOURCE_DIR}/OpenLane2_Support/VICUNA_ON.sv)
    endif()
    if(NOT("${ARCH_VIC_F_FLAG}" STREQUAL  ""))
            #set(MACROS_SV2V "${MACROS_SV2V} --define=VICUNA_F_ON" )
            set(MACRO_SOURCE  ${MACRO_SOURCE}
                              ${CMAKE_CURRENT_SOURCE_DIR}/OpenLane2_Support/VICUNA_F_ON.sv)
    endif()
    if(NOT("${ARCH_VIC_ZFH_FLAG}" STREQUAL  ""))
            #set(MACROS_SV2V "${MACROS_SV2V} --define=VICUNA_ZVFH_ON")
            set(MACRO_SOURCE  ${MACRO_SOURCE}
                              ${CMAKE_CURRENT_SOURCE_DIR}/OpenLane2_Support/VICUNA_ZVFH_ON.sv)
    endif()   

    set(VICUNA_FUNCTIONAL_UNIT_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/OpenLane2_Support/VPROC_FUNCTIONAL_UNITS/vproc_pkg.sv                              #Vicuna sources
                                       ${DESIGN_RTL_DIR_VICUNA}/vproc_xif.sv
                                       ${CMAKE_CURRENT_SOURCE_DIR}/OpenLane2_Support/VPROC_FUNCTIONAL_UNITS/vproc_top.sv
                                       ${CMAKE_CURRENT_SOURCE_DIR}/OpenLane2_Support/VPROC_FUNCTIONAL_UNITS/vproc_lsu.sv
                                       ${CMAKE_CURRENT_SOURCE_DIR}/OpenLane2_Support/VPROC_FUNCTIONAL_UNITS/vproc_queue.sv
                                       ${CMAKE_CURRENT_SOURCE_DIR}/OpenLane2_Support/VPROC_FUNCTIONAL_UNITS/vproc_alu.sv
                                       ${CMAKE_CURRENT_SOURCE_DIR}/OpenLane2_Support/VPROC_FUNCTIONAL_UNITS/vproc_mul.sv
                                       ${CMAKE_CURRENT_SOURCE_DIR}/OpenLane2_Support/VPROC_FUNCTIONAL_UNITS/vproc_mul_block.sv
                                       ${CMAKE_CURRENT_SOURCE_DIR}/OpenLane2_Support/VPROC_FUNCTIONAL_UNITS/vproc_div.sv
                                       ${CMAKE_CURRENT_SOURCE_DIR}/OpenLane2_Support/VPROC_FUNCTIONAL_UNITS/vproc_div_shift_clz.sv
                                       ${CMAKE_CURRENT_SOURCE_DIR}/OpenLane2_Support/VPROC_FUNCTIONAL_UNITS/vproc_fpu.sv
                                       ${CMAKE_CURRENT_SOURCE_DIR}/OpenLane2_Support/VPROC_FUNCTIONAL_UNITS/vproc_sld.sv
                                       ${CMAKE_CURRENT_SOURCE_DIR}/OpenLane2_Support/VPROC_FUNCTIONAL_UNITS/vproc_elem.sv
                                       ${CMAKE_CURRENT_SOURCE_DIR}/OpenLane2_Support/VPROC_FUNCTIONAL_UNITS/vproc_vregfile.sv
                                       ${CMAKE_CURRENT_SOURCE_DIR}/OpenLane2_Support/VPROC_FUNCTIONAL_UNITS/vproc_decoder.sv
                                       ${CMAKE_CURRENT_SOURCE_DIR}/OpenLane2_Support/VPROC_FUNCTIONAL_UNITS/vproc_vregunpack.sv
                                       ${CMAKE_CURRENT_SOURCE_DIR}/OpenLane2_Support/VPROC_FUNCTIONAL_UNITS/vproc_vregpack.sv
                                       )
     
     
     #Generate Verilog file for OpenLane2  
     #For some reason, sv2v includes Vicuna source files, even though it detects they arent used.  Just remove them from the source list if they aren't used
    if("${ARCH_VIC_FLAG}" STREQUAL  "")               
    execute_process(COMMAND rm -r ${CMAKE_CURRENT_SOURCE_DIR}/build/verilog_model
                    COMMAND mkdir ${CMAKE_CURRENT_SOURCE_DIR}/build/verilog_model
                    COMMAND ./sv2v -v -I ${FPNEW_INCLUDE_SV2V} ${FPU_SS_INCLUDE_SV2V} ${CV32E40X_INCLUDE_SV2V} ${VICUNA_INCLUDE_SV2V} -w ${CMAKE_CURRENT_SOURCE_DIR}/build/verilog_model ${MACRO_SOURCE} ${FPNEW_SOURCE} ${FPU_SS_SOURCE} ${CV32E40X_SOURCE} ${DESIGN_RTL_DIR_VICUNA}/vproc_top.sv ${DESIGN_RTL_DIR_VICUNA}/vproc_pkg.sv  ${DESIGN_RTL_DIR_VICUNA}/vproc_xif.sv
                    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}) 
    else() 
     execute_process(COMMAND rm -r ${CMAKE_CURRENT_SOURCE_DIR}/build/verilog_model
     WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})  
    execute_process(COMMAND mkdir ${CMAKE_CURRENT_SOURCE_DIR}/build/verilog_model
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})  
    execute_process(COMMAND ./sv2v -v -I ${FPNEW_INCLUDE_SV2V} ${CV32E40X_INCLUDE_SV2V} -w ${CMAKE_CURRENT_SOURCE_DIR}/build/verilog_model --top=vproc_top ${MACRO_SOURCE} ${FPNEW_SOURCE} ${CV32E40X_SOURCE} ${VICUNA_FUNCTIONAL_UNIT_SOURCES}
                   WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})  
    execute_process(COMMAND cp ${CMAKE_CURRENT_SOURCE_DIR}/build/good_new_files/VFPU/fpnew_cast_multi_797F6_BBAB6.v ${CMAKE_CURRENT_SOURCE_DIR}/build/good_new_files/VFPU/fpnew_cast_multi_F90DF_B7A92.v ${CMAKE_CURRENT_SOURCE_DIR}/build/good_new_files/VFPU/fpnew_opgroup_multifmt_slice_4AB6B_98753.v ${CMAKE_CURRENT_SOURCE_DIR}/build/good_new_files/VFPU/fpnew_opgroup_multifmt_slice_A8C22_4A9DA.v ${CMAKE_CURRENT_SOURCE_DIR}/build/verilog_model
                   WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
    #execute_process(COMMAND rm -r ${CMAKE_CURRENT_SOURCE_DIR}/build/verilog_model
    #                COMMAND mkdir ${CMAKE_CURRENT_SOURCE_DIR}/build/verilog_model
    #                COMMAND ./sv2v -v -w ${CMAKE_CURRENT_SOURCE_DIR}/build/verilog_model ${CMAKE_CURRENT_SOURCE_DIR}/OpenLane2_Support/VPROC_FUNCTIONAL_UNITS/vproc_vregfile.sv
    #               WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})  
    endif()          
endif()

