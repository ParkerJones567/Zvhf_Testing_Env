cmake_minimum_required(VERSION 3.10)
message(STATUS "CMake Version ${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}.${CMAKE_PATCH_VERSION}")

###This file is used to build the verilated models of CV32E40X and Vicuna###

########################
# Arguments
#
# RV_ARCH : select the processor architecture configuration to verilate
# TRACE   : If defined, enable vcd trace outputs.  WARNING: Traces can be very large (GBs)
# TRACE_FULL   : If defined, trace outputs of ENTIRE model WARNING: Traces can be very VERY large (GBs) (requires TRACE=ON)
# CACHE :   Enable a cache configuration


#####################
# Setup the CMake Project
####################

project(Verilated-Builds LANGUAGES C CXX DESCRIPTION "Environment for Verilating Models")
find_package(verilator HINTS ${CMAKE_CURRENT_SOURCE_DIR}/../Toolchain/verilator)

# See whats going in CMake while getting the build process up and running
set(CMAKE_VERBOSE_MAKEFILE ON)

# Using C and C++ 11
set(CMAKE_C_STANDARD 11)
set(CMAKE_CXX_STANDARD 11)


#Currently Supported: rv32im, rv32imzve32x, rv32imf, rv32imfzhf, rv32imfzve32x, rv32imfzve32f
set(RISCV_ARCH rv32im CACHE STRING "Specify the configuration")

option(TRACE "Enable minimal VCD trace outputs" OFF)
option(TRACE_FULL "Enable FULL VCD trace outputs" OFF) #TODO: prevent this option from being cached, force user to always manually enable it


set(CACHE NONE CACHE STRING "NONE, D-Min, D-I-Min, D, D-I")

set(VREG_W 128 CACHE STRING "VREG_W")
set(VMEM_W 32 CACHE STRING "VMEM_W")
set(VLANE_W 32 CACHE STRING "VLANE_W")
set(DCACHE_LINE_W 128 CACHE STRING "DCACHE_LINE_W") 

option(OLD_VICUNA "Return to Original Vicuna configuration with minimal timing anomalies" OFF)

##############
# Configuration Selection
##############



#set the variables to include the correct modules/connections in the project
if(${RISCV_ARCH} STREQUAL "rv32im") #Build only CV32E40X
    set(ARCH_XIF_FLAG  ) 
    set(ARCH_FPU_FLAG  )
    set(ARCH_ZFH_FLAG  )
    set(ARCH_VIC_FLAG  )  
    set(ARCH_VIC_F_FLAG  )
    set(ARCH_VIC_FH_FLAG  ) 
    set(VPROC_CONFIG dual-div) #needs to be included so autogenerated source file is present.  VPROC not used for this configuration
    
elseif(${RISCV_ARCH} STREQUAL "rv32imf") #Build CV32E40X with FPU on the Xif interface
    set(ARCH_XIF_FLAG -DXIF_ON ) 
    set(ARCH_FPU_FLAG -DSCALAR_FPU_ON )
    set(ARCH_ZFH_FLAG  )
    set(ARCH_VIC_FLAG  ) 
    set(ARCH_VIC_F_FLAG  ) 
    set(ARCH_VIC_FH_FLAG  ) 
    set(VPROC_CONFIG dual-div) #needs to be included so autogenerated source file is present.  VPROC not used for this configuration
    
elseif(${RISCV_ARCH} STREQUAL "rv32imfzfh") #Build CV32E40X with FPU on the Xif interface with half-float support
    set(ARCH_XIF_FLAG -DXIF_ON ) 
    set(ARCH_FPU_FLAG -DSCALAR_FPU_ON )
    set(ARCH_ZFH_FLAG -DZFH_ON )
    set(ARCH_VIC_FLAG  )
    set(ARCH_VIC_F_FLAG  ) 
    set(ARCH_VIC_FH_FLAG  ) 
    set(VPROC_CONFIG dual-div)   #needs to be included so autogenerated source file is present.  VPROC not used for this configuration
    
elseif(${RISCV_ARCH} STREQUAL "rv32imzve32x") #Build CV32E40X with Vicuna on the Xif interface
    set(ARCH_XIF_FLAG -DXIF_ON ) 
    set(ARCH_FPU_FLAG  )
    set(ARCH_ZFH_FLAG  )
    set(ARCH_VIC_FLAG -DVICUNA_ON )
    set(ARCH_VIC_F_FLAG  )
    set(ARCH_VIC_FH_FLAG  )  
    set(VPROC_CONFIG dual-div) 
     
elseif(${RISCV_ARCH} STREQUAL "rv32imfzve32x") #Build CV32E40X with Vicuna and FPU on the Xif interface
    set(ARCH_XIF_FLAG -DXIF_ON ) 
    set(ARCH_FPU_FLAG -DSCALAR_FPU_ON )
    set(ARCH_ZFH_FLAG  )
    set(ARCH_VIC_FLAG -DVICUNA_ON )
    set(ARCH_VIC_F_FLAG  )
    set(ARCH_VIC_FH_FLAG  )  
    set(VPROC_CONFIG dual-div)
    
elseif(${RISCV_ARCH} STREQUAL "rv32imfzfhzve32x") #Build CV32E40X with Vicuna and FPU on the Xif interface
    set(ARCH_XIF_FLAG -DXIF_ON ) 
    set(ARCH_FPU_FLAG -DSCALAR_FPU_ON )
    set(ARCH_ZFH_FLAG -DZFH_ON )
    set(ARCH_VIC_FLAG -DVICUNA_ON )
    set(ARCH_VIC_F_FLAG  ) 
    set(ARCH_VIC_FH_FLAG  ) 
    set(VPROC_CONFIG dual-div)
    
elseif(${RISCV_ARCH} STREQUAL "rv32imfzve32f") #Build CV32E40X with Vicuna (+floating point) and FPU on the Xif interface
    set(ARCH_XIF_FLAG -DXIF_ON ) 
    set(ARCH_FPU_FLAG -DSCALAR_FPU_ON )
    set(ARCH_ZFH_FLAG  )
    set(ARCH_VIC_FLAG -DVICUNA_ON )
    set(ARCH_VIC_F_FLAG  -DVICUNA_F_ON) 
    set(ARCH_VIC_FH_FLAG  ) 
    set(VPROC_CONFIG dual-fpu)
    
elseif(${RISCV_ARCH} STREQUAL "rv32imf_zfh_zvfh") #Build CV32E40X with Vicuna (+floating point + half precision float) and FPU on the Xif interface
    set(ARCH_XIF_FLAG -DXIF_ON ) 
    set(ARCH_FPU_FLAG -DSCALAR_FPU_ON )
    set(ARCH_ZFH_FLAG -DZFH_ON )
    set(ARCH_VIC_FLAG -DVICUNA_ON )
    set(ARCH_VIC_F_FLAG  -DVICUNA_F_ON) 
    set(ARCH_VIC_FH_FLAG  -DVICUNA_ZVFH_ON) 
    set(VPROC_CONFIG dual-fpu)

else()
    message(FATAL_ERROR "Unsupported RISCV_ARCH selected")
    
endif()

####
# Vicuna configuration Variables
# Caches are always 2-way set associative, and require at least 2 blocks per set
####

if(${CACHE} STREQUAL "NONE")
    set(ICACHE_SZ 0)
    set(DCACHE_SZ 0)
    set(ICACHE_LINE_W 64)
    set(DCACHE_LINE_W 64) 
elseif(${CACHE} STREQUAL "D-MIN")
    set(ICACHE_SZ 0)
    set(DCACHE_SZ 32)
    set(ICACHE_LINE_W 64)
    set(DCACHE_LINE_W 64) 
elseif(${CACHE} STREQUAL "D-I-MIN")
    set(ICACHE_SZ 32) #Minimum sizes for I and D caches Results in 2 sets with 2 64-bit lines each.
    set(DCACHE_SZ 32)
    set(ICACHE_LINE_W 64)
    set(DCACHE_LINE_W 64) 
elseif(${CACHE} STREQUAL "D")
    set(ICACHE_SZ 0)
    set(DCACHE_SZ 4096)
    set(ICACHE_LINE_W 64)
    set(DCACHE_LINE_W 256) 
elseif(${CACHE} STREQUAL "D-I")
    set(ICACHE_SZ 8192)
    set(DCACHE_SZ 8192)
    set(ICACHE_LINE_W 256)
else()
    message(FATAL_ERROR "Unsupported Cache Configuration")
endif()

#set(VREG_W 128)
#set(VMEM_W 64)  
set(MEM_W 32)
set(MEM_SZ 4194304)      
set(MEM_LATENCY 1)  #TODO: THIS IS UNUSED BY THE DESIGN: REMOVE


####
# Sources/Include Directories
####
 
#Path to CV32E40X sources               
set(DESIGN_RTL_DIR_CV32E40X ${CMAKE_CURRENT_SOURCE_DIR}/../Vicuna/vicuna_zve32f_zvhf/cv32e40x/rtl)

#Path to VICUNA sources  
set(DESIGN_RTL_DIR_VICUNA ${CMAKE_CURRENT_SOURCE_DIR}/../Vicuna/vicuna_zve32f_zvhf/rtl)
#Path to VICUNA Sim dir
set(VICUNA_SIM_DIR ${CMAKE_CURRENT_SOURCE_DIR}/../Vicuna/vicuna_zve32f_zvhf/sim/)

#Path to FPU_SS sources
set(DESIGN_RTL_DIR_FPU_SS ${CMAKE_CURRENT_SOURCE_DIR}/../Vicuna/vicuna_zve32f_zvhf/fpu_ss/src)
#Path to FPNEW sources
set(DESIGN_RTL_DIR_FPNEW ${CMAKE_CURRENT_SOURCE_DIR}/../Vicuna/vicuna_zve32f_zvhf/fpu_ss/fpnew/src)


set(CV32E40X_SOURCE ${DESIGN_RTL_DIR_CV32E40X}/include/cv32e40x_pkg.sv                  #Sources Needed for CV32E40X
                    ${DESIGN_RTL_DIR_CV32E40X}/if_c_obi.sv
                    ${DESIGN_RTL_DIR_CV32E40X}/if_xif.sv
                    ${DESIGN_RTL_DIR_CV32E40X}/../bhv/cv32e40x_sim_clock_gate.sv)
               

set(CV32E40X_INCLUDE ${DESIGN_RTL_DIR_CV32E40X}                                         #CV32E40X Include Dirs
                    ${DESIGN_RTL_DIR_CV32E40X}/include
                    ${DESIGN_RTL_DIR_CV32E40X}/../bhv)
                     
                     
set(VICUNA_SOURCE   ${DESIGN_RTL_DIR_VICUNA}/vproc_pkg.sv                               #Vicuna sources
                    ${DESIGN_RTL_DIR_VICUNA}/../vproc_config.sv 
                    ${DESIGN_RTL_DIR_VICUNA}/vproc_top.sv
                    ${DESIGN_RTL_DIR_VICUNA}/vproc_xif.sv
                    ${DESIGN_RTL_DIR_VICUNA}/vproc_core.sv
                    ${DESIGN_RTL_DIR_VICUNA}/vproc_vregpack.sv
                    ${DESIGN_RTL_DIR_VICUNA}/vproc_vregunpack.sv)

set(VICUNA_INCLUDE  ${DESIGN_RTL_DIR_VICUNA}                                            #Vicuna Include Dirs
                    ${DESIGN_RTL_DIR_VICUNA}/../sva)
                   
set(FPNEW_SOURCE    ${DESIGN_RTL_DIR_FPNEW}/fpnew_pkg.sv 
                    ${DESIGN_RTL_DIR_FPNEW}/common_cells/src/cf_math_pkg.sv             #FPNEW Sources
                    ${DESIGN_RTL_DIR_FPNEW}/fpu_div_sqrt_mvp/hdl/defs_div_sqrt_mvp.sv
                    ${DESIGN_RTL_DIR_FPNEW}/fpnew_top.sv)


set(FPNEW_INCLUDE   ${DESIGN_RTL_DIR_FPNEW}                                             #FPNEW Include Dirs
                    ${DESIGN_RTL_DIR_FPNEW}/common_cells/include
                    ${DESIGN_RTL_DIR_FPNEW}/common_cells/src
                    ${DESIGN_RTL_DIR_FPNEW}/fpu_div_sqrt_mvp/hdl
                    ${DESIGN_RTL_DIR_FPNEW}/../vendor/openc910/C910_RTL_FACTORY/gen_rtl/vfdsu/rtl
                    ${DESIGN_RTL_DIR_FPNEW}/../vendor/openc910/C910_RTL_FACTORY/gen_rtl/clk/rtl
                    ${DESIGN_RTL_DIR_FPNEW}/../vendor/opene906/E906_RTL_FACTORY/gen_rtl/fdsu/rtl
                    ${DESIGN_RTL_DIR_FPNEW}/../vendor/opene906/E906_RTL_FACTORY/gen_rtl/clk/rtl
                    ${DESIGN_RTL_DIR_FPNEW}/../vendor/opene906/E906_RTL_FACTORY/gen_rtl/fpu/rtl
                    )               
                   
                   
set(FPU_SS_SOURCE   ${DESIGN_RTL_DIR_FPU_SS}/fpu_ss_pkg.sv                              #FPU_SS Sources
                    ${DESIGN_RTL_DIR_FPU_SS}/fpu_ss_prd_f_pkg.sv
                    ${DESIGN_RTL_DIR_FPU_SS}/fpu_ss_prd_f_zfh_pkg.sv
                    ${DESIGN_RTL_DIR_FPU_SS}/fpu_ss_prd_zfinx_pkg.sv
                    ${DESIGN_RTL_DIR_FPU_SS}/fpu_ss_instr_pkg.sv
                    ${DESIGN_RTL_DIR_FPU_SS}/fpu_ss.sv )


set(FPU_SS_INCLUDE  ${DESIGN_RTL_DIR_FPU_SS} )                                          #FPU_SS Include Dirs
                 
                   
####
#Generate vproc_config.sv for chosen configuration.  Must be generated before verilating
####
#TODO:Is there a better way to set required env variables for 'make' call to generate vproc_config.sv?
set(ENV{VPROC_CONFIG} ${VPROC_CONFIG})
set(ENV{VREG_W} ${VREG_W})
set(ENV{VMEM_W} ${VMEM_W})
set(ENV{VLANE_W} ${VLANE_W})
execute_process(COMMAND rm -f vproc_config.sv
                COMMAND make -f config.mk VPROC_CONFIG_PKG=vproc_config.sv
                WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/../Vicuna/vicuna_zve32f_zvhf)



if(TRACE)
    add_definitions(-DTRACE_VCD) #This does nothing.  TODO: Confirm and remove.
    set(TRACE TRACE)
    
    if(TRACE_FULL)
        set(TRACE_FLAG  ) #no --trace-depth flag defaults to entire model
    else()
        set(TRACE_FLAG --trace-depth 2)
    endif()
endif()


if(OLD_VICUNA)
    set(VICUNA_MODE -DOLD_VICUNA)
endif()

#Add this flag to detect if Vicuna is enabled to allow for correct selection of verilator header files in verilator_main.cpp
add_definitions(${ARCH_VIC_FLAG})

#Todo: allow user to set this
#add_definitions(-DABORT_CYCLES=100000)  #Need to disable this for benchmarks, it triggers when clearing the tensor arenas.  Better way to detect stalls has been added, leaving this for future use

#Create the verilated model 
add_executable(verilated_model ${VICUNA_SIM_DIR}verilator_main.cpp)


verilate(verilated_model SOURCES ${FPNEW_SOURCE} ${FPU_SS_SOURCE} ${CV32E40X_SOURCE} ${VICUNA_SOURCE} 
               INCLUDE_DIRS  ${FPNEW_INCLUDE} ${FPU_SS_INCLUDE} ${CV32E40X_INCLUDE} ${VICUNA_INCLUDE} 
               TOP_MODULE vproc_top 
               PREFIX Vvproc_top
               ${TRACE}                                    
               VERILATOR_ARGS -cc -exe ${VICUNA_SIM_DIR}verilator_main.cpp --unroll-count 1024 
                              -Wno-WIDTH -Wno-PINMISSING -Wno-UNOPTFLAT   
	                          -Wno-UNSIGNED -Wno-IMPLICIT -Wno-LITENDIAN -Wno-CASEINCOMPLETE        
	                          -Wno-SYMRSVDWORD -Wno-BLKANDNBLK -Wno-BLKSEQ -Wno-SYNCASYNCNET        
	                          -Wno-COMBDLY 
	                          -Wno-WIDTHCONCAT         
                              #+define+COREV_ASSERT_OFF       #Fixes UVM error with CV32E40X (Needed when not using -DVPROC_SVA)
	                          --clk clk_i
	                          #--trace-depth 2
	                          ${TRACE_FLAG} 
	                          --assert -DVPROC_SVA
                              -GMEM_W=${MEM_W} -GVMEM_W=${VMEM_W} -GICACHE_SZ=${ICACHE_SZ} -GICACHE_LINE_W=${ICACHE_LINE_W} -GDCACHE_SZ=${DCACHE_SZ} -GDCACHE_LINE_W=${DCACHE_LINE_W}
                              -DMAIN_CORE_CV32E40X #Flag to select CV32E40X as scalar core
                              ${VICUNA_MODE}
                              ${ARCH_XIF_FLAG} #Each flag must be in a separate variable or they don't get passed correctly
                              ${ARCH_FPU_FLAG} 
                              ${ARCH_ZFH_FLAG} 
                              ${ARCH_VIC_FLAG}   
                              ${ARCH_VIC_F_FLAG} 
                              ${ARCH_VIC_FH_FLAG}                   
                              -CFLAGS "-std=gnu++11 -O2 -DUSE_VICUNA=ON")

